// ALL models (schema) are kept here

// CA Datagrid
export class DatagridColumn {
    id: number;                                 // Unique ID, for later use
    displayName: string;                        // Text displayed in Grid header
    fieldName: string;                          // Field name in Array
    databaseDBTableName: string;                // Optional Table name in DB
    databaseDBFieldName: string;                // Optional Field name in DB
    tooltip: string;                            // Text string as tooltip
    datatype: string;                           // string, number, boolean
    prefix: string;                             // ie RK, or Rm
    divideBy: number;                           // 1000, 1000 000.  If <=0 => no action
    displayLength: number;                      // Max lenght in Grid, even if field is wider
    maxLength: number;                          // 0 means ignore
    sortOrder: string;                          // For later use - maybe add sort on startup
    filter: string;                             //  For later use - maybe add filter on startup
    backgroundColor: string;                    // ie 'beige'
    color: string;                              // ie 'black'
    conditionalFormatColor: string;             // If '' then no condFmt.  ie 'blue'
    nrDataQualityIssues: number;                // Optional nr of DataQual issues
    maxValue: number;                           // Optional Max value in this col
    minValue: number;                           // Optional Min value in this col
    average: number;                            // Optional Avg value in this col
    linkedDashboardID: number;                  // Optional ID of linked Dashboard
    linkedDashboardTabID: number;               // Optional ID of linked Tab
    isFrozen: boolean;                          // Optional: true if freeze col
    datagridColumnHidden?: any;
}

export class DatagridInput {
    datagridColumns: DatagridColumn[];            // Cols, with info on each
    datagridData: any;                            // Data Array
    datagridPagination: boolean;                  // True if pagination is on
    datagridPaginationSize: number;               // Size of each page, ie 10 (rows)
    datagridShowHeader: boolean;                  // True to show Headers
    datagridShowRowActionMenu: boolean;           // True to show the action menu per row
    datagridShowData: boolean;                    // True to show Data
    datagridShowFooter?: boolean;                 // True to show Footer
    datagridRowHeight: number;                    // Height in px
    datagriduserCanChangeProperties: boolean;     // False if use can change Nothing in grid, ie cannot even resize
    datagridShowTotalsRow: boolean;               // True to show additional row of totals at bottom
    datagridShowTotalsCol: boolean;               // True to show additional col of totals on right
    datagridCanEditInCell: boolean;               // True is user can edit inside cells
    datagridCanExportData: boolean;               // True if the data may be exported
    datagridEmptyMessage: string;                 // Message to display if the grid is empty
    datagridShowFields: string;                   // Array of Fields names to include in the data
    datagridVisibleFields: string[];              // List of avaialble field names to make visible in grid
}

// Setup / Settings / General
export class CanvasSettings {
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique ID (added for consistency with other models)
    companyName: string;                    // Company Name
    companyLogo: string;                    // Optional file name for Company logo
    dashboardTemplate: string;              // Default Dashboard Template (later use)
    maxTableLength: number;                 // Max Table Length (say 500 records)
    widgetsMinZindex: number;               // Widgets Min Zindex
    widgetsMaxZindex: number;               // Widgets Max Zindex
    gridSize: number;                       // Size of the Grid
    snapToGrid: boolean;                    // Snap to grid (T/F)
    printDefault: string;                   // Deflt: Local HP
    printSize: string;                      // Deflt Page Size: A4
    printLayout: string;                    // Deflt Layout: Single page, B and W

    // System-wide Messages
    notInEditModeMsg: string;               // Not-In-EditMode Message to display on StatusBar
    noQueryRunningMessage: string;          // No-Query-Running Message to display on StatusBar
    queryRunningMessage: string;            // Query-Running Message to display on StatusBar
    cleanCacheOnLogin: boolean;             // True to clean cache at login
    cleanCacheOnLogout: boolean;            // True to clean cache at logout

    // Generated by the system
    editedBy: string;                       // Last user who edited this task
    editedOn: Date;                         // Date this task was last edited
    createdBy: string;                      // UserID who created this task, can be System
    createdOn: Date;                        // Date task was created

}

export class CanvasAction {
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique id per action
    dashboardID: number;                    // Where action took place
    dashboardTabID: number;                 // Where action took place
    widgetID: number;                       // Optional W where action took place

    objectType: string;                     // Type, ie Dashboard, Widget
    actionType: string;                     // Main type of action: Add, Edit, Delete, Open, etc
    action: string;                         // Sub action type, ie Move Widget
    description: string;                    // Optional description, ie calling routine, etc

    undoID: number;                         // Optional id of item in UNDO
    redoID: number;                         // Optonal id of item in REDO

    oldWidget: any;                         // Full W before action
    newWidget: any;                         // Full W after action

    createor: string;                       // UserID who created action
    created: Date;                          // DateTime action was created
}

export class CanvasAuditTrail {
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique id per action
    dashboardID: number;                    // Where action took place
    dashboardTabID: number;                 // Where action took place
    widgetID: number;                       // If linked to a Widget

    objectType: string;                     // Dashboard, Widget
    actionType: string;                     // Add, Delete, Change, Open
    action: string;                         // Sub action type, ie Move Widget
    description: string;                    // Optional description, ie calling routine, etc

    keyChanged: string;                     // Field / key that was changed
    oldValue: any;                          // Value prior to change
    newValue: any;                          // Value after change

    userID: string;                         // User who made change
    changedOn: Date;                        // Date Time of log, when changes was made
}

export class StatusBarMessage {
    _id?: string;                           // Mongo ID (read only)
    message: string;                        // Text to display
    uiArea: string;                         // Specific UI area to affect, ie StatusBar
    classfication: string;                  // Info, Warning, Error
    timeout: number;                        // Duration to stay in ms, default = 3000
    defaultMessage: string;                 // Optional Message to display after timeout
}

export class StatusBarMessageLog {
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique ID
    logDateTime: Date;                      // When message was logged
    userID: string;                         // User for which message was logged
    dashboardID: number;                    // Optional Dashboard open when message received
    dashboardName: string;                  // Optional Dashboard name, filled @RunTime
    message: string;                        // Text to display
    uiArea: string;                         // Specific UI area to affect, ie StatusBar
    classfication: string;                  // Info, Warning, Error
    timeout: number;                        // Duration to stay in ms, default = 3000
    defaultMessage: string;                 // Optional Message to display after timeout
}

export class CurrentDashboardInfo {
    _id?: string;                           // Mongo ID (read only)
    currentDashboardID: number = 0;         // Current D we are working with
    currentDashboardState: string;          // Current D state
    currentDashboardTabID: number = 0;      // Current TabID
    currentDashboardTabIndex: number = 0;   // Index in [T]
    widgetsToRefresh: number[] = [];        // Optional list of W to refresh, [] = All
    refreshingRoutine: string;              // Component-Function that called to refresh
    refreshDateTime: Date;                  // When D was last refreshed
}

export class PaletteButtonsSelected {
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique record ID
    userID: string;                         // FK to User, to which Button belongs
    paletteButtonBarID: number;             // FK to PaletteButtonBar
    mainmenuItem: string;                   // True if belongs to main menu
    menuText: string;                       // Text that appears on menu
    shape: string;                          // Clarity shape of icon
    size: number;                           // Size of icon
    class: string;
    backgroundColor: string;                // Bg Colour of button
    accesskey: string;                      // Shortcut key
    sortOrder: number;                      // Nr (used for sorting)
    sortOrderSelected: number;              // SortOrder once selected, null ind DB, calced @Runtime
    isDefault: boolean;                     // True if in initial system setting
    functionName: string;                   // Typescript function to call when clicked
    params: string;                         // Parameters to pass the TS function
    tooltipContent: string;                 // Text in tooltip
    isSelected: boolean;                    // Toggled at Runtime

}

export class PaletteButtonBar {
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique record ID
    mainmenuItem: string;                   // True if belongs to main menu
    menuText: string;                       // Text that appears on menu
    shape: string;                          // Clarity shape of icon
    size: number;                           // Size of icon
    class: string;                          // 
    backgroundColor: string;                // Bg Colour of button
    accesskey: string;                      // Shortcut key
    sortOrder: number;                      // Nr (used for sorting)
    sortOrderSelected: number;              // SortOrder once selected, null ind DB, calced @Runtime
    isDefault: boolean;                     // True if in initial system setting
    functionName: string;                   // Typescript function to call when clicked
    params: string;                         // Parameters to pass the TS function
    tooltipContent: string;                 // Text in tooltip
    isSelected: boolean;                    // Toggled at Runtime
}

export class CSScolor {
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique record ID
    name: string;                           // Name, ie brown
    cssCode: string;                        // CSS code, as name, hex, rgb.  ie transparent, rgb(111,52,78)
    shortList: boolean;                     // True if part of shorter list
}

export class ContainerStyle {
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique ID
    name: string;                           // Unique Name of style

    // Container
    containerBackgroundcolor: string;       // Actual colour (CSS name or HEX code)
    containerBackgroundcolorName: string;   // Name - CSS (ie black) or Custome Name (Our company blue)
    containerBorderColour: string;          // Actual colour (CSS name or HEX code)
    containerBorderColourName: string;      // Name - CSS (ie black) or Custome Name (Our company blue)
    containerBorderRadius: string;          // Border radius in px
    containerBorderSize: string;            // Size of border in px
    containerBorderType: string;            // Type of border, dotted or solid
    containerBoxshadow: string;             // Border shadow, ie 2px 2px gray
    containerFontsize: number;              // Size of container and text font, in px

    // Shape
    shapeFontFamily: string;                // Font, ie Aria, Sans Serif
    shapeIsBold: boolean;                   // True if text is bold
    shapeIsItalic: boolean;                 // True if text is italic
    shapeLineHeight: string;                // Line Height: normal, 1.6, 80%
    shapeTextAlign: string;                 // Align text Left, Center, Right

    // Created, updated
    containerCreatedOn: Date;               // Created on
    containerCreatedBy: string;             // Created by
    containerUpdatedOn: Date;               // Updated on
    containerUpdatedBy: string;             // Updated by
}

// Messages / Activities / Alerts / Comments / User
export class CanvasTask {
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique task ID
    taskText: string;                       // Description of task
    activityType: string;                   // Type of Task (or Activity)
    taskStatus: string;                     // Status, ie Draft, Completed
    assignedToUserID: string;               // UserID to whom this was assigned

    precedingTaskID: number;                // Optional task on which this one depends
    linkedDashboardID: number;              // Optional D-ID linked to this task
    taskComments: string[];                 // Immutable array of comments / feedback (userID, dt, text)
    startDate: Date;                        // Date when task should start
    deadlineDate: Date;                     // Date when task should end
    endDate: Date;                          // Date when task ended
    durationDays: number;                   // Duration in days

    // Generated by the system
    editedBy: string;                       // Last user who edited this task
    editedOn: Date;                         // Date this task was last edited
    createdBy: string;                      // UserID who created this task, can be System
    createdOn: Date;                        // Date task was created
}

export class CanvasMessage {
    _id?: string;               // Mongo ID (read only)
    id: number;                 // Unique ID
    threadID: number;           // Optional thread - to keep converstations together (later use)
    sender: string;             // UserID who sent message, could also be System (for Alerts)
    sentOn: Date;               // DateTime message was sent
    recipients: [               // Original list of Users, groups are split into users @time
        {
            userID: string;     // UserID of recipient
            readOn: Date;       // dateTime read, null if not read
        }
    ];
    toGroups: string[];         // Original list of Groups
    subject: string;            // Message Subject
    body: string;               // Message body
    dashboardID: number;        // Optional Dashboard linked to this message
    dashboardTabID: number;     // Optional Tab linked to this message
    url: string;                // Optional url to link to
    replyToMessageID: number;   // Optional message to which this is a reply

    // At runtime
    iHaveReadThis: boolean;     // 2nd normal form to make easier, if current user read it
    dashboardName: string;      // Optional, name of linked D
    replySender: string;        // Optional, sender of message to which this is a reply
    replyMessageStart: string;  // Optional, first 50 chars of message to which this is a reply
}

export class CanvasMessageSingle {
    _id?: string;               // Mongo ID (read only)
    id: number;                 // Unique ID
    messageID: number;          // FK to CanvasMessage
    recipient: string;          // Single Recipient, deduced from To-lists in Message
    read: boolean;              // True if Recipient has read the message.  Can toggle this
}

export class CanvasComment {
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique ID
    dashboardID: number;                    // Dashboard to which comment is linked
    widgetID: number;                       // Optional Widget linked
    comment: string;                        // Comment Text
    creator: string;                        // UserID
    createdOn: Date;                        // DateTime
}

export class CanvasUser {
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique record ID
    companyName: string;                    // Company Name, for multi-tenant
    userID: string;                         // Unique UserID
    password: string;                       // Password
    firstName: string;                      // First Name
    lastName: string;                       // Last Name
    nickName: string;                       // Nickname
    email: string;                          // Email Address
    workNumber: string;                     // Work Telephone number
    cellNumber: string;                     // Cell number
    groups: string[];                       // Groups to which user belongs
    isSuperuser: boolean;                   // Systems supervisor - has ALL powers
    isStaff: boolean;                       // Is a staff member (and not Guest)
    isActive: boolean;                      // When False, cannot work on system (ie left company)
    dateJoined: Date;                       // Dt when first registered
    lastLogin: Date;                        // Dt last logged in
    colorScheme: string;                    // Color scheme for Canvas - for later use
    gridSize: number;                       // Size of Grid on Dashboard in px
    environment: string;                    // Live, Test-Environment-Name
    profilePicture: string;                     
    queryRuntimeWarning: number;            // Minutes: Warn user if a report is known to run longer
    snapToGrid: boolean;                    // True: snap Widgets to the grid points on Dashboard
    favouriteDashboards: number[];          // IDs of D that are fav of this user
    isFirstTimeUser: boolean;               // True if not created a D
    isAdministrator: boolean;               // Role can add/delete users to the group,
        // and assign roles).  Must be at least one administrator role at all times.
    dashboardCanCreateRole: boolean;            // Role can create Dashboards
    dashboardCanViewRole: boolean;              // Role can view Dashboards
    dashboardCanEditRole: boolean;              // Role can change / edit Dashboards
    dashboardCanSaveRole : boolean;             // Role can save changes to a Dashboards
    dashboardCanDeleteRole: boolean;            // Role can delete a Dashboard
    dashboardCanGrantAccessRole: boolean;       // Role can change access to a Dashboard
    dashboardCanAddDatasourceRole: boolean;     // Role can change add DS to a Dashboard
    datasourceCanCreateRole: boolean;           // Role can create Datasource
    datasourceCanViewRole: boolean;             // Role can view Datasource
    datasourceCanEditRole: boolean;             // Role can change / edit Datasource
    datasourceCanDeleteRole: boolean;           // Role can delete a Datasource
    datasourceCanGrantAccessRole: boolean;      // Role can change access to a Datasource
    canManageGroupRole: boolean;                // Role can add/delete users to Group
    lastPaletteLeft: number;                    // Last value saved
    lastPaletteTop: number;                     // Last value saved
    lastAppShowPopupMessageGotIt: boolean;      // Last value saved
    cleanCacheOnLogin: boolean;                 // True to clean cache at login
    cleanCacheOnLogout: boolean;                // True to clean cache at logout
    preferencePaletteHorisontal: boolean;                   // T/F - Palette Horisontal (else Vertial)
    preferencePlaySound: boolean;                           // T/F - play a sound when showing a message on the StatusBar
    preferenceAutoSync: boolean;                            // T/F - can auto sync
    preferenceShowOpenStartupMessage: boolean;              // T/F - show open startup msg
    preferenceShowOpenDataCombinationMessage: boolean;      // T/F - show msg on open combination form
    preferenceShowViewStartupMessage: boolean;              // T/F - show msg on open view form
    preferenceShowDiscardStartupMessage: boolean;           // T/F - show msg on discard form
    preferenceDefaultTemplateID: number;                    // Default Template ID
    preferenceDefaultDateformat: string;                    // Default Date Format, ie YYYY/MM/DD
    preferenceDefaultFolder: string;                        // Default Folder
    preferenceDefaultPrinter: string;                       // Default Printer
    preferenceDefaultPageSize: string;                      // Default Page Size
    preferenceDefaultPageLayout: string;                    // Default Page Layout
    preferenceDefaultSnapshotMins: number;                  // Mins after which a Snapshot must be taken (0 = none)
    preferenceStartupDashboardID: number;                   // Optional Dashboard ID to show at startup
    preferenceStartupDashboardTabID: number;                // Optional Dashboard Tab ID to show at startup
    preferenceShowWidgetEditorLite: boolean;                // True at start, show the Lite editor (not full one)

    // Generated by the system
    editedBy: string;                                       // Last user who edited this task
    editedOn: Date;                                         // Date this task was last edited
    createdBy: string;                                      // UserID who created this task, can be System
    createdOn: Date;                                        // Date task was created
}

export class CanvasGroup {
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique Group ID
    name: string;                           // Group name

    // Generated by the system
    editedBy: string;                       // Last user who edited this task
    editedOn: Date;                         // Date this task was last edited
    createdBy: string;                      // UserID who created this task, can be System
    createdOn: Date;                        // Date task was created
}

export class WebSocketMessage {
    _id?: string;                           // Mongo ID (read only)
    sender: string;                         // UserID who sent it, CanvasServer if backend
    content: any;                           // Payload, can be text string or Object or Array
    messageType: string;                    // Type of message, ie objectDirty, Message, etc
    action: string;                         // Optional Action, ie Add, Update, Delete, ReplaceAll
    objectName: string;                     // Affected data, ie Datasources, Users
    objectID: number;                       // Optional single Record affected, ie DatasourceID
    severity: string;                       // How severy is badness, critical = refresh immediatetly
    lastWebSocketNumber: number;            // Last WS number for THIS object
    newLocalExpiryDateTime: Date;           // New Expiry date calced by Server
}

// Data
export class Combination {
    _id?: string;                           // Mongo ID (read only)
    combinationID: number;
    dashboardID: number;
    type: string;                           // ie Union
}

export class CombinationDetail {
    _id?: string;                           // Mongo ID (read only)
    combinationDetailID: number;
    combinationID: number;
    lhDatasourceID: number;
    lhFieldName: string;
    rhDatasourceID: number;
    rhFieldName: string;
}

export class DataQualityIssue {
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique record ID
    name: string;                           // Short name to identify issue
    datasourceID: number;                   // DS to which the issue relates
    status: string;                         // Status: Logged, InProgress, Solved
    type: string;                           // User-defined type, ie Stats, Backfill
    description;                            // Description of the issue
    nrIssues: number;                       // Optional Nr of issue, can be rounded
    loggedBy: string;                       // UserID who logged the issue
    loggedOn: Date;                         // Date Issue was logged
    solvedBy: string;                       // UserID who solved the issue
    solvedOn: Date;                         // Date issue was marked as solved
}

export class DataOwnership {
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique record ID
    datasourceID: number;                   // DS for which the ownership is defined
    userID: string;                         // Short name to identify issue
    type: string;                           // User-defined ownership role, ie Owner, Steward, etc
    description: string;                    // Description of the responsibilities
    createdBy: string;                      // UserID who created the record
    createdOn: Date;                        // Date record was created
    updatedBy: string;                      // UserID who last updated the record
    updatedOn: Date;                        // Last Date when record was updated

    // @RunTime
    datasourceName: string;                 // Name of the linked DS
}

export class Dataset {
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique record ID
    datasourceID: number;                   // FK to DS to which this belongs
    sourceLocation: string;                 // Where data lives: file, localDB, MSSQL, etc
    url: string;                            // URL for http request
    folderName: string;                     // Optional folder name where data is stored
    fileName: string;                       // Optional file name where data is stored
    cacheServerStorageID: string;           // s-id on Server of cached results
    cacheLocalStorageID: string;            // s-id Locally of cached results
    isLocalDirty: boolean;                  // True means must get from server (cannot use local)
    data: any;                              // Filtered data as json
    dataRaw: any;                           // Unfiltered data as json
}

export class DataCachingTable {
    _id?: string;                           // Mongo ID (read only)
    key: string;                            // Unique key
    objectID: number;                       // Optional record ID, ie for Data
    messageDateTime: Date;                  // DateTime message was sent
    localCacheableDisc: boolean;            // True if cached locally, ie IndexedDB on Disc (DB)
    localCacheableMemory: boolean;          // True if cached locally, ie IndexedDB in RAM
    localCurrentVariableName: string;       // Optional name of memory current variable
    localExpiryDateTime: Date;              // When local cache expries
    localLastUpdatedDateTime: Date;         // When local cache last refreshed
    localLifeSpan: number;                  // Period in seconds before Workstation cache must be refreshed
    localTableName: string;                 // Optional name of Table in IndexedDB
    localThresholdLines: number;            // Max Nr lines that may be cached on Workstation
    localVariableName: string;              // Optional name of memory variable
    serverCacheableMemory: boolean;         // True if cached on server in RAM
    serverCacheableDisc: boolean;           // True if cached on server on Disc (DB)
    serverExpiryDateTime: Date;             // When cache expires on server
    serverLastUpdatedDateTime: Date;        // When cached last refreshed on server
    serverLastWSsequenceNr: number;         // Last WSockets message nr sent for this
    serverLifeSpan: number;                 // Period in seconds before Server cache must be refreshed
    serverThresholdLines: number;           // Max Nr lines that may be cached on Server
    serverVariableName: string;             // VariableName for the data on the server
}

export class DatasourceFilter {
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique ID
    dashboardID: number;                    // FK to Dashboard
    sequence: number;                       // Sequence Nr - for LATER user
    filterFieldName: string;                // Name (text) of field
    filterOperator: string;                 // ie Equal, Less Than, etc
    filterValue: string;                    // ie. 12 Japan  1,5  a,b,c  true
    filterValueFrom: string;                // From value for Range
    filterValueTo: string;                  // To value for Range
    isActive: boolean;                      // True if activated, else not used
}

export class Datasource {
    
	// Descriptive info
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique record ID
    type: string;                           // Type of source, ie File, Server, Web, Service
    subType: string;                        // Subtype, ie Excel/ CSV for File, PostgreSQL/ Mongo for Server
    typeVersion: string;                    // Version of source, ie Excel 2016
    name: string;                           // Name of Datasource
    username: string;                       // Username to log into server (if not via AD)
    password: string;                       // Password to log into server
    description: string;                    // Description of the DS
    dataFieldIDs: number[];                 // IDs of fields in DB table
    dataFields: string[];                   // FieldNames, in order to display
    dataFieldTypes: string[];               // Field Types, same order as dataFields
    dataFieldLengths: number[];             // Max field lengths, same order as dataFields

	// Parameters and Filters
    datasourceFilters?: DatasourceFilter[];  // Optional Array of DS-Filters per Dashboard
    datasourceFilterForThisDashboard: boolean;  // @ RunTime, changes: true if THIS D has filters on THIS DS

    // Access Type
    accessType: string;                     // How to access D: Private, Public, AccessList

    // Create and Edit info
    createMethod: string;                   // Method how DS was created, ie DirectFile, ..., ManagedSQLEditor
    createdBy: string;                      // Creator
    createdOn: Date;                        // DateTime Created
    editor: string;                         // Last Edited By
    dateEdited: Date;                       // Last Edited On

    // Caching info
    cacheResultsOnServer: boolean;          // True if results may be cached on server. Each Tr is decided separately
    unRefreshable: boolean;                 // Can create once, but cannot Refresh after that
    cacheResultsLocal: boolean;             // True if Local results must be cached
    nrCacheCopies: number;                  // Nr Cache copies kept, 0 means none

    // Optional Max Oldness allowed - must be fresher than given
    oldnessMaxPeriodInterval: string;       // Ie. second, minute, hour, day, month, year
    oldnessMaxPeriodUnits: number;          // Must be fresher than say 8 hour
    oldnessRelatedDate: string;             // Ie. today, yesterday, previousWorkingDay, weekStart, monthStart, yearStart
    oldnessRelatedTime: string;             // Ie. '08:00' - must be fresher than today 8:00

    // Refresh info
    refreshedBy: string;                    // Last UserID that refreshed this datasource
    refreshedServerOn: Date;                // Last dateTime this DS was refreshed on Server
    refreshedLocalOn: Date;                 // Last dateTime this DS was refreshed locally

    // Location and authentication
    folder: string;                         // Folder from which the data was loaded
    fileName: string;                       // Filename from which the data was loaded
    excelWorksheet: string;                 // Excel Worksheet name from which the data was loaded
    transposeOnLoad: boolean;               // True to transpose data before loading (X <-> Y)
    startLineNr: number;                    // 1 = first = default
    csvSeparationCharacter: string;         // CSV file column separator: comma or ;
    csvQuotCharacter: string;               // CSV values in "", in '' or without quotes
    webUrl: string;                         // URL for web connectors
    webTableIndex: string;                  // Index number (base 0) of table to load, else the Name of the table

    // Managed Connection, Connection created and managed outside of the DS
    connectionID: number;                   // Connection to DB
    dataTableID: number;                    // ID of table linked in DB
    businessGlossary: string;               // Detailed business oriented description of DS (non-technical)
    dataDictionary: string;                 // Detailed technical description of DS

    // Direct Connection, all info provided here and once off
    databaseName: string;                   // DB to connect to
    port: string;                           // Port on the DB Server
    serverType: string;                     // Server or Host type, ie MySQL, PostgreSQL, etc
    serverName: string;                     // Server or Host name
    dataTableName: string;                  // Table inside Server with the data
    dataSQLStatement: string;               // SQL Statement to extract data with
    dataNoSQLStatement: string;             // NoSQL Statement to extract data with
    dataNeo4jStatement: string;             // Cypher Statement to extract data with
    dataGraphQLStatement: string;           // GraphQL Statement to extract data with
    dataOverlaySpecification: any;          // Overlay Specification to extract data with

    // Updated at runtime
    nrWidgets: number;                      // Nr of Ws linked to this DS (at the moment)
}

export class DatasourceSchedule {
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique record ID
    datasourceID: number;                   // FK to Datasource
    name: string;                           // Name
    description: string;                    // Description of Schedule
    repeatFrequency: string;                // Occurs: Daily, Weekly, Monthly, Yearly
    repeatsEvery: number;                   // Repeats every x of Frequency, ie 2 = every 2nd Month
    weeklyMonday: boolean;                  // For Weekly: occurs on this weekday
    weeklyTuesday: boolean;                 // For Weekly: occurs on this weekday
    weeklyWednesday: boolean;               // For Weekly: occurs on this weekday
    weeklyThursday: boolean;                // For Weekly: occurs on this weekday
    weeklyFriday: boolean;                  // For Weekly: occurs on this weekday
    weeklySaturday: boolean;                // For Weekly: occurs on this weekday
    weeklySunday: boolean;                  // For Weekly: occurs on this weekday
    monthlyOn: number;                      // For Monthly: Occurs on this Day of month, ie 13th
    yearlyJanuary: boolean;                 // For Yearly: Occurs in this month
    yearlyFebruary: boolean;                // For Yearly: Occurs in this month
    yearlyMarch: boolean;                   // For Yearly: Occurs in this month
    yearlyApril: boolean;                   // For Yearly: Occurs in this month
    yearlyMay: boolean;                     // For Yearly: Occurs in this month
    yearlyJune: boolean;                    // For Yearly: Occurs in this month
    yearlyJuly: boolean;                    // For Yearly: Occurs in this month
    yearlyAugust: boolean;                  // For Yearly: Occurs in this month
    yearlySeptember: boolean;               // For Yearly: Occurs in this month
    yearlyOctober: boolean;                 // For Yearly: Occurs in this month
    yearlyNovember: boolean;                // For Yearly: Occurs in this month
    yearlyDecember: boolean;                // For Yearly: Occurs in this month
    startsOn: Date;                         // Date
    endsNever: boolean;                     // True means never ends
    endsAfter: number;                      // n times, ie 2 means it will run twice
    endsOn: Date;                           // Date

    // Generated by the system
    editedBy: string;                       // Last user who edited this task
    editedOn: Date;                         // Date this task was last edited
    createdBy: string;                      // UserID who created this task, can be System
    createdOn: Date;                        // Date task was created
}

export class DatasourceScheduleLog {
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique ID
    datasourceID: number;                   // D that was linked
    userID: string;                         // User to whom D was sent
    groupID: string;                        // Optional Group to which D was sent
    sentOn: Date;                           // Date dispatched
    status: string;                         // Pending, Halted, Success, Failed
    errorMessage: string;                   // Error message if it failed
}

export class DatasourcePermission {
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique ID
    datasourceID: number;                   // FK to DS
    name?: string;                          // Optional DS name - filled in @Runtime
    userID: string;                         // 1 of usr/grp filled in, one blank
    groupID: number;                        // Granted to Group ID
    groupName?: string;                     // Optional Group name - filled in @Runtime
    canView: boolean;                       // Can view a DS
    canEdit: boolean;                       // Can Edit a DS, ie do a transformation
    canDelete: boolean;                     // Can Delete a DS (Definition, not the Data)
    canRefresh: boolean;                    // Can Refresh a DS (Data, not Definition)
    canGrant: boolean;                      // Can Grant access to a DS (Data, not Definition)

    // Generated by the system
    editedBy: string;                       // Last user who edited this task
    editedOn: Date;                         // Date this task was last edited
    createdBy: string;                      // UserID who created this task, can be System
    createdOn: Date;                        // Date task was created
}

export class DatasourceTransformation {
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique ID
    transformationID: number;               // FK to Tr
    datasourceID: number;                   // FK to DS
    sequence: number;                       // Order, 1 at top
    parameterValue: string[];               // Parameter Values for this transformation

    // Generated by the system
    editedBy: string;                       // Last user who edited this task
    editedOn: Date;                         // Date this task was last edited
    createdBy: string;                      // UserID who created this task, can be System
    createdOn: Date;                        // Date task was created
}

export class Transformation {
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique ID
    category: string;                       // Category, ie based on a Column, etc
    // NB: the name has to be unique: used so in code + else confusing to user
    name: string;                           // Name of transformation, ie FillBlank
    description: string;                    // Description of transformation

    // Parameter info
    nrParameters: number;                   // Nr of parameters, to make sure all array below the same length
    parameterPlaceholder: string[];         // Placeholder info, ie Fill in nr of characters ...
    parameterTitle: string[];               // Title (tooltippie text)
    parameterDefaultValue: string[];        // Default Text / Value when creating a new record
    parameterHeading: string[];             // Heading of field on form, ie Left
    parameterType: string[];                // Type of field (string, numeric, boolean).  Blank means any

    // Generated by the system
    editedBy: string;                       // Last user who edited this task
    editedOn: Date;                         // Date this task was last edited
    createdBy: string;                      // UserID who created this task, can be System
    createdOn: Date;                        // Date task was created
}

export class TributaryServerType {
    _id?: string;                           // Mongo ID (read only)
    serverType: string;                     // Type of Server, ie PostgresSQL
    driverName: string;                     // Tributary driver string, ie postgres
    inspector: string;                      // Tributary inspector: tributary.inspectors.mongodb:MongoDBInspector
    connector: string                       // Tributary connector, ie tributary.connectors.sql:SqlConnector

    // Generated by the system
    editedBy: string;                       // Last user who edited this task
    editedOn: Date;                         // Date this task was last edited
    createdBy: string;                      // UserID who created this task, can be System
    createdOn: Date;                        // Date task was created
}

export class TributarySource {
    _id?: string;                           // Mongo ID (read only)
    source: {
        connector: string;                  // Tributary Connector, ie tributary.connectors.sql:SqlConnector
        drivername: string;                 // Tributary driver, ie postgres
        username: string;                   // Username to log into the DB
        password: string;                   // Password to log into the DB
        database: string;                   // Database Name
        host: string;                       // Host or Server Name
        port: number;                       // Optional Port on the host, ie 5432
        query: string;                      // SQL, escaped, ie "select I.\"InvoiceDate\" as \"Date\", sum(I.\"Total\") as \"Amount\" from invoices I group by I.\"InvoiceDate\""
    }
}

export class DataConnection {
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique ID
    connectionName: string;                 // Name of the Connection, ie XIS MS SQL Server
    serverType: string;                     // Type of server, ie PostgreSQL, MySQL, etc
    serverName: string;                     // DNS Server Name or IP address, ending with optional :port
    port: string;                           // Port on the Server, maybe blank
    database: string;                       // Database to connect to
    authentication: string;                 // Type of authentication: usr & psw, OR login as me (ie using AD)
    username: string;                       // As entered by user
    password: string;                       // As entered by user - encrypted ?
    description: string;                    // Description of Connection

    // For later use
    defaultDatabase?: string;  
    logFolder?: string;
    logfileName?: string;
    characterSet?: string;
    language?: string;
    serverOptions?: string;

    // Generated by the system
    editedBy: string;                       // Last user who edited this task
    editedOn: Date;                         // Date this task was last edited
    createdBy: string;                      // UserID who created this task, can be System
    createdOn: Date;                        // Date task was created

}

export class DataSchema {
    _id?: string;                           // Mongo ID (read only)
    serverName: string;                     // TODO - Is this needed in real DB?
    tableName: string;                      // Name of DB Table
    tableDescription: string;               // Description of DB Table
    tableFields:                            // Fields in DB Table
        {
            fieldName: string;              // FieldName
            fieldType: string;              // FieldType
        }[];
    tableMetadata:
        {
            schema: string;                 // ie Public
            type: string;                   // ie table
        }[];

}

export class DataTable {
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique ID
    connectionID: number;                   // Connection to which the Field belongs
    nameDB: string;                         // Field Name (in DB)
    nameLocal: string;                      // Optional Local Field Name (shown in D)
    type: string;                           // Table / View
    description: string;                    // Detailed description of the table
    businessGlossary: string;               // Detailed business oriented description of table (non-technical)

    // Creation, update and refresh
    creator: string;                        // Created By
    dateCreated: Date;                      // Created On
    editor: string;                         // Last Edited By
    dateEdited: Date;                       // Last Edited On
}

export class DataField {
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique ID
    tableID: number;                        // DataTable to which the Field belongs
    nameDB: string;                         // Field Name (in DB)
    nameLocal: string;                      // Optional Local Field Name (shown in D)
    type: string;                           // String, Number, Boolean
    format: string;                         // Optional, ie YYYY/MM/DD
    filterOperand: string;                  // Optional filter operand, ie '>='
    filterValue: string;                    // Optional filter value, ie '1'
    calculation: string;                    // Optional Calculation, ie 'OtherFieldName / 2'
    orderSequence: number;                  // Optional order sequence
    orderDirection: string;                 // Optional order direction, Asc / Desc
    description: string;                    // Detailed description of field (technical terms)
    businessGlossary: string;               // Detailed business oriented description of field (non-technical)
    keyField: boolean;                      // True if a key field - used for explanedBy (later use)
    explainedBy: string;                    // Graph (bar chart of ...) that explains field if key field is true (later use)

    // Creation, update and refresh
    creator: string;                        // Created By
    dateCreated: Date;                      // Created On
    editor: string;                         // Last Edited By
    dateEdited: Date;                       // Last Edited On

    // At Runtime
    hidden: boolean;                        // True if hidden at runtime
}

export class Dashboard {

    // Identification and description
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique ID
    originalID: number;                     // ID of the original (Completed state) for a draft
    draftID: number;                        // ID of the Draft version for a Complete
    version: number;                        // Version of the Dashboard
    state: string;                          // State, ie Complete, Draft
    code: string;                           // Short code for D
    name: string;                           // Dashboard Name
    description: string;                    // User description

    // Access Type
    accessType: string;                     // How to access D: Private, Public, AccessList

    // Overall properties
    password: string;                       // Optional password to lock Dashboard
    refreshMode: string;                    // OnDemand, OnOpen, Repeatedly
    refreshTimer: number;                   // Nr seconds to repeat, if refreshMode = Repeatedly
    defaultTabID: number;       
    defaultExportFileType: string;          // Default file type on export
    url: string;            
    qaRequired: boolean;    
    isSample: boolean;                      // True if this is a sample

    // Overlay looks
    backgroundColor: string;    
    backgroundImage: string;
    templateDashboardID: number;

    // Creation, update and refresh
    creator: string;                        // Creator UserID
    dateCreated: Date;                      // Dt created
    editor: string;                         // Last UserID who edited this Dashboard
    dateEdited: Date;                       // Last Edit dt
    refresher: string;                      // Last UserID who refreshed this Dashboard, and it data
    dateRefreshed: Date;                    // Last refresh dt

    // 2nd normal form - calculated at DB level
    nrWidgets: number;                      // Nr of Widgets on Dashboard
    nrShapes: number;                       // Nr of Shapes on Dashboard
    nrRecords: number;          
    nrTimesOpened: number;                  // Nr of times this Dashboard has been opened
    nrTimesChanged: number;                 // Nr of times this Dashboard has been edited
    tabs: number[];                         // Array of TabIDs in this Dashboard
    permissions: string[];      
}

export class DashboardTab {
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique record ID
    originalID: number;                     // Optional T-id from which this T was copied
    dashboardID: number;                    // FK to DashboardID to which widget belongs
    name: string;                           // Short Name
    description: string;                    // Description
    displayOrder: number;                   // Sort on this to order tabs on D
    backgroundColor: string;                // Bg Color of T on Status Bar
    backgroundColorName: string;            // Name of Bg Color of T on Status Bar
    color: string;                          // Color of T name on Status Bar
    colorName: string;                      // Name of Color of T name on Status Bar

    // Generated by the system
    editedBy: string;                       // Last user who edited this task
    editedOn: Date;                         // Date this task was last edited
    createdBy: string;                      // UserID who created this task, can be System
    createdOn: Date;                        // Date task was created
}

// List of Recently opened D
export class DashboardRecent {
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique ID
    userID: string;                         // User who last saved the D
    dashboardID: number;                    // Last D position
    dashboardTabID: number;                 // Last T position
    editMode: boolean;                      // EditMode when last saved
    accessed: Date;                         // Last dateTime opened
    stateAtRunTime: string;                 // State when opened, ie Deleted
    nameAtRunTime: string;                  // Name when opened
}

export class DashboardTag {
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique ID
    dashboardID: number;                    // FK to Dashboard to which this tag applies
    tag: string;                            // Tag name / text

    // Generated by the system
    editedBy: string;                       // Last user who edited this task
    editedOn: Date;                         // Date this task was last edited
    createdBy: string;                      // UserID who created this task, can be System
    createdOn: Date;                        // Date task was created
}

export class DashboardLayout {
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique ID
    dashboardID: number;                    // D to which these belong
    name: string;                           // Short Name, ie 3 x 5 with 5 blocks
    description: string;                    // More detailed description
    imageUrl?: string;                      // Optional Image url, only used in definition

    // Generated by the system
    editedBy: string;                       // Last user who edited this task
    editedOn: Date;                         // Date this task was last edited
    createdBy: string;                      // UserID who created this task, can be System
    createdOn: Date;                        // Date task was created
}

export class DashboardTheme {
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique ID
    name: string;                           // Name
    description: string;                    // Description

    // Generated by the system
    editedBy: string;                       // Last user who edited this task
    editedOn: Date;                         // Date this task was last edited
    createdBy: string;                      // UserID who created this task, can be System
    createdOn: Date;                        // Date task was created
}

export class DashboardSnapshot {
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique ID
    dashboardID: number;                    // D for which the Snapshot is stored
    name: string;                           // Name of Snapshot
    snapshotType: string;                   // StartEditMode, BeforeFirstEdit, AutoFrequency, UserDefined
    comment: string;                        // Optional Comment
    dashboards: Dashboard[];                // Array of D used (can include a Template)
    dashboardTabs: DashboardTab[];          // Ts of D
    widgets: Widget[];                      // W of D
    datasets: Dataset[];                    // dSets of D
    datasources: Datasource[];              // DS of D
    widgetCheckpoints: WidgetCheckpoint[];  // Checkpoints of W

    // Generated by the system
    editedBy: string;                       // Last user who edited this task
    editedOn: Date;                         // Date this task was last edited
    createdBy: string;                      // UserID who created this task, can be System
    createdOn: Date;                        // Date task was created
}

export class DashboardSchedule {
    _id?: string;                           // Mongo ID (read only)
    id: number;
    dashboardID: number;
    datasourceID: number;
    name: string;
    description: string;
    repeatFrequency: string;                // Occurs: Daily, Weekly, Monthly, Yearly
    repeatsEvery: number;                   // Repeats every x of Frequency, ie 2 = every 2nd Month
    weeklyMonday: boolean;                  // For Weekly: occurs on this weekday
    weeklyTuesday: boolean;                 // For Weekly: occurs on this weekday
    weeklyWednesday: boolean;               // For Weekly: occurs on this weekday
    weeklyThursday: boolean;                // For Weekly: occurs on this weekday
    weeklyFriday: boolean;                  // For Weekly: occurs on this weekday
    weeklySaturday: boolean;                // For Weekly: occurs on this weekday
    weeklySunday: boolean;                  // For Weekly: occurs on this weekday
    monthlyOn: number;                      // For Monthly: Occurs on this Day of month, ie 13th
    yearlyJanuary: boolean;                 // For Yearly: Occurs in this month
    yearlyFebruary: boolean;                // For Yearly: Occurs in this month
    yearlyMarch: boolean;                   // For Yearly: Occurs in this month
    yearlyApril: boolean;                   // For Yearly: Occurs in this month
    yearlyMay: boolean;                     // For Yearly: Occurs in this month
    yearlyJune: boolean;                    // For Yearly: Occurs in this month
    yearlyJuly: boolean;                    // For Yearly: Occurs in this month
    yearlyAugust: boolean;                  // For Yearly: Occurs in this month
    yearlySeptember: boolean;               // For Yearly: Occurs in this month
    yearlyOctober: boolean;                 // For Yearly: Occurs in this month
    yearlyNovember: boolean;                // For Yearly: Occurs in this month
    yearlyDecember: boolean;                // For Yearly: Occurs in this month
    startsOn: Date;                         // Date
    endsNever: boolean;                     // True means never ends
    endsAfter: number;                      // n times, ie 2 means it will run twice
    endsOn: Date;                           // Date

    // Generated by the system
    // editedBy: string;                    // Last user who edited this task
    // editedOn: Date;                      // Date this task was last edited
    // createdBy: string;                   // UserID who created this task, can be System
    // createdOn: Date;                     // Date task was created
}

export class DashboardScheduleLog {
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique ID
    dashboardID: number;                    // D that was linked
    userID: string;                         // User to whom D was sent
    groupID: string;                        // Optional Group to which D was sent
    sentOn: Date;                           // Date dispatched
    status: string;                         // Pending, Halted, Success, Failed
    errorMessage: string;                   // Error message if it failed

    // Generated by the system
    editedBy: string;                       // Last user who edited this task
    editedOn: Date;                         // Date this task was last edited
    createdBy: string;                      // UserID who created this task, can be System
    createdOn: Date;                        // Date task was created
}

export class DashboardPermission {
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique ID
    dashboardID: number;                    // FK to D
    dashboardName?: string;                 // Filled in @RunTime
    userID: string;                         // UserID - NB: 1 of usr/grp filled in, one blank
    groupID: number;                        // Group ID
    groupName: string;                      // Filled in @RunTime
    canViewRight: boolean;                  // True if can View this D
    canEditRight: boolean;                  // True if can Edit this D
    canSaveRight: boolean;                  // Can Save a D
    canDeleteRight: boolean;                // True if can Delete this D
    canAddDatasource: boolean;              // True if can Add a DS to this D
    canGrantAccess: boolean;                // Can Delete a D
    grantor: string;                        // UserId who granted permission
    grantedOn: Date;                        // Date and time created or last updated

    // Generated by the system
    editedBy: string;                       // Last user who edited this task
    editedOn: Date;                         // Date this task was last edited
    createdBy: string;                      // UserID who created this task, can be System
    createdOn: Date;                        // Date task was created
}

export class DashboardSubscription {
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique ID
    dashboardID: number;                    // FK to Dashboard
    userID: string;                         // User
    view: boolean;                          // Nofity if another user Views this D
    editmode: boolean;                      // Nofity if another user goes to EditMode on this D
    saved: boolean;                         // Nofity if another user Saves this D
    deleted: boolean;                       // Nofity if another user Deletes this D
    dashboardCode: string;                  // D-Code filled in at Runtime
    notify: string;                         // How to be notified: Email, Message, Both

    // Generated by the system
    editedBy: string;                       // Last user who edited this task
    editedOn: Date;                         // Date this task was last edited
    createdBy: string;                      // UserID who created this task, can be System
    createdOn: Date;                        // Date task was created
}

// TODO - replace with new FieldsSchema model
export class dataSchemaInterface {
    _id?: string;                           // Mongo ID (read only)
    name: string;                           // Name of Field (DB or Calculated)
    typeName: string;                       // ie String
    type: string;                           // ie string
    length: number;                         // Optional field length
    isCalculated: boolean;                  // True if calculated
    calculatedExpression: string;           // Formula for calculated fields
}

export class WidgetLayout {
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique ID
    dashboardLayoutID: number;              // FK of the D Layout to which it belongs
    height: number;                         // Heigth of box
    left: number;                           // Left position
    top: number;                            // Top position
    width: number;                          // Width of box

    // Generated by the system
    editedBy: string;                       // Last user who edited this task
    editedOn: Date;                         // Date this task was last edited
    createdBy: string;                      // UserID who created this task, can be System
    createdOn: Date;                        // Date task was created
}

export class GraphHistory {
    _id?: string;                           // Mongo ID (read only)
    layer: number;                          // Layer for which W specs are stored
    widgetSpec: Widget[]                    // Array of Ws previously stored
}

export class GraphCalculation {
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique ID
    sequence: number;                       // Sequence Nr - for LATER user
    calculatedExpression: string;           // Expression, ie sin(datum.ValueTraded)
    calculatedAs: string;                   // Name of resultant calculated field
    calculatedDataType: string;             // Data type of newly calculated field
}

export class GraphFilter {
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique ID
    sequence: number;                       // Sequence Nr - for LATER user
    filterFieldName: string;                // Name (text) of field
    filterOperator: string;                 // ie Equal, Less Than, etc
    filterTimeUnit: string;                 // ie Year, Month, Day
    filterValue: string;                    // ie. 12 Japan  1,5  a,b,c  true
    filterValueFrom: string;                // From value for Range
    filterValueTo: string;                  // To value for Range
    isActive: boolean;                      // True if activated, else not used
}

export class widgetGraphSpecification {

    // Optional Specification, used for Custom graphTypes
    _id?: string;                           // Mongo ID (read only)
    graphSpecification: any;                // Vega specification

    // Mark
    graphMark: string;                      // Mark, ie bar, line, etc
    graphMarkOrient: string;                // Horisontal/Verticle - ie for bar when both axis numbers
    graphMarkLine: boolean;                 // True to add line, ie for Area graph
    graphMarkPoint: boolean;                // True to add point, ie for Area graph
    graphMarkPointColorName: string;        // Name of Point colour
    graphMarkPointColor: string;            // Actual Point colour in hex
    graphMarkColourName: string;            // Name of Mark colour (if colour channel not used)
    graphMarkColour: string;                // Actual Mark colour in hex
    graphMarkCornerRadius: number;          // Size of corner radius, ie for bar
    graphMarkExtent: string;                // Extent: ci, stderr, stdev, irq for Error Band & -Bar
    graphMarkOpacity: number;               // Opacity of Mark, 0 to 1
    graphMarkBinSpacing: number;            // Space between bins, ie 0 or 1 (stats or nice)
    graphMarkInterpolate: string;           // Interpolation
    graphMarkSize: number;                  // Size of the Mark

    // X
    graphXfield: string;                    // Field name on the X Channel
    graphXaggregateName: string;            // Aggregation Name on X Channel, ie Average
    graphXaggregate: string;                // Aggregation on X Channel, ie average
    graphXtimeUnit: string;                 // Time Unit, ie Year, Month, etc 
    graphXbin: boolean;                     // True if channel is binned
    graphXMaxBins: number;                  // Max nr of ESTIMATED bins
    graphXformat: string;                   // Format in D3-format
    graphXimpute: string;                   // Calculate missing values based on method/value
    graphXimputeValue: number;              // Value if impute = VALUE
    graphXstack: string;                    // Way that field is stacked, ie Normalised
    graphXsort: string;                     // Sort order of field
    graphXtype: string;                     // Graph type, ie nominal
    graphXtypeName: string;                 // Name of the graph type, ie Nominal

    // Y
    graphYfield: string;                    // Field name on the Y Channel
    graphYaggregateName: string;            // Aggregation Name on Y, ie Average
    graphYaggregate: string;                // Aggregation on Y Channel, ie average
    graphYbin: boolean;                     // True if channel is binned
    graphYMaxBins: number;                  // Max nr of ESTIMATED bins
    graphYformat: string;                   // Format in D3-format
    graphYimpute: string;                   // Calculate missing values based on method/value
    graphYimputeValue: number;              // Value if impute = VALUE
    graphYstack: string;                    // Way that field is stacked, ie Normalised
    graphYsort: string;                     // Sort order of field
    graphYtimeUnit: string;                 // Time unit, ie Year, Month, etc
    graphYtype: string;                     // Graph type, ie nominal
    graphYtypeName: string;                 // Name of the graph type, ie Nominal

    // Color
    graphColorField: string;                // Field name on the Y Channel
    graphColorAggregateName: string;        // Aggregation Name on Y Channel, ie Average
    graphColorAggregate: string;            // Aggregation on Y Channel, ie average
    graphColorBin: boolean;                 // True if channel is binned
    graphColorMaxBins: number;              // Max nr of ESTIMATED bins
    graphColorFormat: string;               // Format in D3-format
    graphColorImpute: string;               // Calculate missing values based on method/value
    graphColorImputeValue: number;          // Value if impute = VALUE
    graphColorScheme: string;               // Preselected colour scheme
    graphColorSort: string;                 // Sort order of field
    graphColorStack: string;                // Way that field is stacked, ie Normalised
    graphColorType: string;                 // Graph type, ie nominal
    graphColorTypeName: string;             // Name of the graph type, ie Nominal
    graphColorTimeUnit: string;             // Time unit, ie Year, Month, etc

    // X Axis
    graphXaxisFormat: string;               // Format in D3-format
    graphXaxisGrid: boolean;                // True if X grid lines show
    graphXaxisGridColorName: string;        // Name of color for X gridlines
    graphXaxisGridColor: string;            // Actual color of X gridline in hex, rgb, etc
    graphXaxisLabels: boolean;              // True to show X axis labels
    graphXaxisLabelAngle: number;           // Angle of X axis labels in degrees
    graphXaxisLabelColorName: string;       // Name of color for X labels
    graphXaxisLabelColor: string;           // Actual color of X labels in hex, rgb, etc
    graphXaxisLabelsLength: number;         // Max length of label text in px
    graphXaxisScaleType: string;            // Type of axis, ie linear, log, etc
    graphXaxisScaleDomainStart: string;     // Start of Scale Domain
    graphXaxisScaleDomainEnd: string;       // End of Scale Domain
    graphXaxisTitle: string;                // Title of X axis
    graphXaxisTitleCheckbox: boolean;       // True to show axis title

    // Y Axis
    graphYaxisFormat: string;               // Format in D3-format
    graphYaxisGrid: boolean;                // True to show gridlines
    graphYaxisGridColorName: string;        // Name of color for Y gridlines
    graphYaxisGridColor: string;            // Actual color of Y gridline in hex, rgb, etc
    graphYaxisLabels: boolean;              // True to show Y axis labels
    graphYaxisLabelAngle: number;           // Angle of Y axis labels in degrees
    graphYaxisLabelColorName: string;       // Name of color for Y labels
    graphYaxisLabelColor: string;           // Actual color of Y labels in hex, rgb, etc
    graphYaxisLabelsLength: number;         // Max length of labels in px
    graphYaxisScaleType: string;            // Type of scale, ie Linear, Log, etc
    graphYaxisScaleDomainStart: string;     // Start of Scale Domain
    graphYaxisScaleDomainEnd: string;       // End of Scale Domain
    graphYaxisTitle: string;                // Title of Y axis
    graphYaxisTitleCheckbox: boolean;       // True to show axis title

    // Legend
    graphLegendAxisScaleType: string;       // Type of Axis, ie Linear, Log, etc
    graphLegendHide: boolean;               // True to hide the WHOLE Legend
    graphLegendTitleCheckbox: boolean;      // True to show Legend Title text
    graphLegendTitle: string;               // Title text of the Legend
    graphLegendFormat: string;              // Format in D3-format
    graphLegendLabels: boolean;             // True to show Legend Labels
    graphLegendLabelColorName: string;      // Name of color for Legend labels
    graphLegendLabelsLength: number;        // Length of the label in px
    graphLegendLabelColor: string;          // Actual color of Legend labels in hex, rgb, etc

    // Size
    graphSizeField: string;                 // Field name on the Size Channel
    graphSizeType: string;                  // Graph type, ie nominal
    graphSizeTypeName: string;              // Name of the graph type, ie Nominal
    graphSizeAggregateName: string;         // Aggregation Name on Size Channel, ie Average
    graphSizeAggregate: string;             // Aggregation on Size Channel, ie average
    graphSizeBin: boolean;                  // True if channel is binned
    graphSizeMaxBins: number;               // Max nr of ESTIMATED bins

    // Row
    graphRowField: string;                  // Field name on the Row Channel
    graphRowType: string;                   // Graph type, ie nominal
    graphRowTypeName: string;               // Name of the graph type, ie Nominal
    graphRowTitleCheckbox: boolean;         // False to remove the Row Title
    graphRowTitle: string;                  // User-defined Row Title

    // Column
    graphColumnField: string;               // Field name on the Column Channel
    graphColumnType: string;                // Graph type, ie nominal
    graphColumnTypeName: string;            // Name of the graph type, ie Nominal
    graphColumnTitleCheckbox: boolean;      // False to remove the Column Title
    graphColumnTitle: string;               // User-defined Column Title

    // Detail
    graphDetailField: string;               // Field name on the Detail channel
    graphDetailType: string;                // Graph type, ie nominal
    graphDetailTypeName: string;            // Name of the graph type, ie Nominal

    // X2
    graphX2Field: string;                   // Field name on the secondary X
    graphX2Type: string;                    // Graph type, ie nominal
    graphX2TypeName: string;                // Name of the graph type, ie Nominal
    graphX2AggregateName: string;           // Aggregation on Secondary X, ie Avg

    // Y2
    graphY2Field: string;                   // Field name on the secondary Y
    graphY2Type: string;                    // Graph type, ie nominal
    graphY2TypeName: string;                // Name of the graph type, ie Nominal
    graphY2AggregateName: string;           // Aggregation on Secondary Y, ie Avg

    // Projection
    graphProjectionType: string;            // Type of geo projection
    graphProjectionFieldLatitude: string;   // Lat of geo projection
    graphProjectionFieldLongitude: string;  // Long of geo projection

    // Condition
    conditionColourName: string;            // Name of Colour when condition met
    conditionColour: string;                // Actual Colour when condition met
    conditionFieldName: string;             // Field to put condition on
    conditionOperator: string;              // Condition Operator
    conditionValue: string;                 // Condition Value
    conditionValueFrom: string;             // Condition From Value
    conditionValueTo: string;               // Condition To Value

}

export class Widget {

    _id?: string;                           // Mongo ID (read only)

    // Type
    widgetType: string;                     // Graph, Table, Shape, Slicer
    widgetSubType: string;                  // Type of shape, ie Circle.  NB spelling is case-
                                            // sensitive, and used in Code !!

    // Where W lives
    dashboardID: number;                    // FK to DashboardID to which widget belongs
    dashboardTabID: number;                 // FKs to Tabs where the widget lives
    dashboardTabIDs: number[];              // FKs to Tabs where the widget lives

    // Locking
    isLocked: boolean;                      // True if this W is temporary locked

    // Identification and Description
    id: number;                             // Unique ID
    originalID: number;                     // Original ID from which W was copied
    name: string;                           // Name of Widget
    description: string;                    // Description of Widget
    annotation: string;                     // Optional annotation per W, deeper info about W
    annotationLastUserID: string;           // Last UserID who updated this annotation
    annotationLastUpdated: Date;            // Last date-time this annotation was updated

    // Properties loaded @Runtime
    isLiked: boolean;                       // @RunTime: True if Widget is liked by me
    isSelected: boolean;                    // True if W is currently selected
    nrDataQualityIssues: number;            // Nr of related data Quality issues
    nrComments: number;                     // Nr of related Comments
    showCheckpoints: boolean;               // True is use is showing Checkpoints in Presentation Mode
    checkpointIDs: number[];                // Array of FKs to widgetCheckpoints
    currentCheckpoint: number;              // Index of current Checkpoint in checkpointIDs
    lastCheckpoint: number;                 // Index of last Checkpoint in checkpointIDs
    // NB: lastCheckpoint >= 0 is used to test that there are no Checkpoints for a W
    // NB: it is not the ID, but the INDEX
    // NB: So, it must be set to -1 to be meaningful.

    // Links @Runtime
    hyperlinkDashboardID: number;           // Optional Widget ID to jump to
    hyperlinkDashboardTabID: number;        // Optional Tab Nr to jump to
    containerStyleID: number;               // Optional ContainerStyleID that provides formatting

    // Data related
    datasourceID: number;                   // Specific ID that this W points to.  For a W,

    // this is the dSet that contains its data.  For a Sl, it is the dSet that it filters.
    datasetID: number;                      // Specific ID that this W points to.  For a W,
    // this is the dSet that contains its data.  For a Sl, it is the dSet that it filters.
    // For a W, -1 = latest dataset of the DS-id.  For now, Sl must have a datsetID <> -1
    data: any;                              // Optional - can copy rawData into table
    dataFields: string[];                   // Optional - can copy [fieldNames] into table
    dataFieldTypes: string[];               // Optional - can copy [fieldTypes] into table
    dataFieldLengths: number[];             // Optional - can copy [fieldLengths] into table
    dataschema: dataSchemaInterface[];      // Array with fields info, ie name, type, etc
    dataParameters: {"field": string; "value": string;}[]
    reportID: number;                       // FK to report (query / data).  -1: dont load any report data
    reportName: string;                     // Report (query) name in Canvas Server (DS implied)
    rowLimit: number;                       // 0 = show all, 5 = TOP 5, -3 = BOTTOM 3
    addRestRow: boolean;                    // True means add a row to  = SUM(rest)
    size: string;                           // Small, Medium, Large ito data loading

    // Container
    containerBackgroundcolor: string;       // Actual colour (CSS name or HEX code)
    containerBackgroundcolorName: string;   // Name - CSS (ie black) or Custome Name (Our company blue)
    containerBorder: string;                // HTML Border def, is 1px solid gray
    containerBorderColourName: string;      // Name - CSS (ie black) or Custome Name (Our company blue)
    containerBorderRadius: string;          // Border radius of container in px
    containerBoxshadow: string;             // HTML shadow def, is 2px 2px gray
    containerFontsize: number;              // Font size inside container
    containerHeight: number;                // Height of container in px
    containerLeft: number;                  // Left of container in px
    containerHasContextMenus: boolean = true;  // True to display context menu at top of W
    containerHasTitle: boolean;             // True to display Title at top of container
    containerTop: number;                   // Top of container in px
    containerWidth: number;                 // Width of container in px
    containerZindex: number;                // Z-index of container

    // Title
    titleText: string;                      // Text, can include HTML & keywords (##today##)
    titleBackgroundColor: string;           // Actual colour (CSS name or HEX code)
    titleBackgroundColorName: string;       // Name - CSS (ie black) or Custome Name (Our company blue)
    titleBorder: string;                    // CSS SPEC, ie 1px solid black
    titleBorderName: string;                // Name - CSS (ie black) or Custome Name (Our company blue)
    titleColor: string;                     // Actual colour (CSS name or HEX code)
    titleColorName: string;                 // Name - CSS (ie black) or Custome Name (Our company blue)
    titleFontsize: number;                  // in px (for later use)
    titleFontWeight: string;                //   (for later use)
    titleHeight: number;                    // in px (for later use)
    titleMargin: string;                    // css spec, ie 2px 1px 0px 0px
    titlePadding: string;                   // css spec, ie 2px 1px 0px 0px
    titleTextAlign: string;                 // left, right, center
    titleWidth: number;                     // in %: 0 means it adapts to container

    // Visual Grammer / plotting library
    // Layout 101: one Widget can have:
    // - 1 visual graph or visualisation that is shown on the form
    // - 1 visual grammar, ie Vega or Vega-Lite.  Later, another plotting library
    // - 1 specification that is rendered - this is recreated and not stored
    // - 1 or more layers, each with:
    //   - graph
    //   - info (x, y, etc) and 
    //   - 
    visualGrammar: string;                  // Gramar for graphs, default = Vega
    version: number;                        // Version of visual grammar
    visualGrammarType: string;              // Type, Standard or Custom

    // Graph
    graphBackgroundColorName: string;       // Name of Bg color for graph
    graphBackgroundColor: string;           // Bg color for graph in hex, rgb, etc
    graphBorderColorName: string;           // Name of Border Color Border for graph
    graphBorderColor: string;               // Border Border Color for graph in hex, rgb, etc
    graphHeight: number;                    // in px
    graphLeft: number;                      // in px
    graphTop: number;                       // in px
    graphWidth: number;                     // in px
    graphDimensionRight: number;            // Space for legend in px (adds to width)
    graphDimensionLeft: number;             // Space for x axis in px
    graphDimensionBottom: number;           // Space for y axis in px
    graphGraphPadding: number;              // How many px graph is padded
    graphHasSignals: boolean;               // If graph has signals
    graphFillColor: string;                 // Fill colour of the graph area
    graphHoverColor: string;                // 
    graphPanAndZoom: boolean;               // True if selection = grid, with pan and zoom.  Only applies to single layer graphs
    graphSpecification: any;                // Vega specification
    graphDescription: string;               // Description of graph for users

    // Data
    graphUrl: string;                       // URL of data
    graphData: any;                         // Actual data as an Array

    // Title
    graphTitleText: string;                 // Text to show in Title
    graphTitleAnchor: string;               // Alignment of text: start, middle, end
    graphTitleAngle: number;                // Angle of title text in degrees, default is 0
    graphTitleBaseline: string;             // Top, Middel, Bottom of Title relative to graph
    graphTitleColorName: string;            // Name of colour of Text
    graphTitleColor: string;                // Actual text colour in HEX
    graphTitleFont: string;                 // Font name of text
    graphTitleFontSize: number;             // Size of text font
    graphTitleFontWeight: number;           // Weight, 100, 200 ... 900
    graphTitleLength: number;               // Max length, rest with ellipses
    graphTitleOrientation: string;          // Postion of text Top, Right, Bottm, Left

    // Transformation: Overall Array for later user when many different types and sequences
    graphTransformations: [
        {
            id: number;                     // Unique ID
            sequence: number;               // Sequence Nr
            transformationType: "";         // ie Calculat, Filter aka Vega-Lite spec 
        }
    ];

    // Calculations
    graphCalculations: GraphCalculation[];  // Array of calculations

    // Transformations: Filter
    graphFilters: GraphFilter[];            // Array of filters
    sampleNumberRows: number;               // Random rows to sample EACH time, 0 means all rows

    // Layers
    graphLayerFacet: string;                // Facet: Single, Layer, Hconcet, Vconcat
    graphLayers?: widgetGraphSpecification[]; // Info and optional spec for each Layer 
    
    // Table - to be determined later ...
    tableBackgroundColor: string;           // Actual colour (CSS name or HEX code)
    tableBackgroundColorName: string;       // Name - CSS (ie black) or Custome Name (Our company blue)
    tableColor: string;                     // Actual colour (CSS name or HEX code)
    tableColorName: string;                 // Name - CSS (ie black) or Custome Name (Our company blue)
    tableCols: number;                      // Nr of cols, 0 means all
    fontSize: number;                       // Font size of text
    tableHeight: number;                    // in px, cuts of rest if bigger than this
    tableHideHeader: boolean;               // False to hide the column header row
    tableLeft: number;                      // in px (for later use)
    tableLineHeight: number;                // Table Line height (for later use)
    tableRows: number;                      // Nr of rows in the data, excluding header: 0 means all
    tableTop: number;                       // in px (for later use)
    tableWidth: number;                     // in px, cuts of rest if bigger than this (for later use)

    // Slicer
    slicerAddRest: boolean;                 // True to add everything NOT in slicerSelection
    slicerAddRestValue: boolean;            // True means add all NOT in Sl
    // 1. All in Sl selected + AddRest = 100% of data)  2. None in Sl + AddRest = Compliment
    slicerBins: {isSelected: boolean; name: string; fromValue: number; toValue: number}[];
    slicerColor: string;                    // Text Color
    slicerFieldName: string;                // Name to filter on
    slicerNumberToShow: string;             // Nr fields (values) to show in Slicer - default = All
    slicerSelection: {isSelected: boolean; fieldValue: string;}[];
    slicerSortField: string;                // Name of Field to sort Slicer dataset on
    slicerSortFieldOrder: string;           // Sort order for Slicer dataset, Ascending, Descending
    slicerType: string;                     // Type of Slicer, ie List, Bin

    // Shape
    shapeBullet:                            // Bullets, with info
        {
            text: string;                   // Text to show
            linkedTabID: number;            // Optionally lined TabID
            color: string;                  // Colour of text
            jumpedColor: string             // Colour when jumped
        }[]; 
    shapeBulletStyleType: string;           // List marker: disc, circle, square, none
    shapeBulletsOrdered: boolean;           // True if the list is ordered
    shapeBulletMarginBottom: number;        // Margin-Top in px
    shapeCorner: number;                    // Corner size in px, ie 15
    shapeFill: string;                      // Fill / inside (ie of circle, colour of text, etc) in HEX
    shapeFillName: string;                  // Name - CSS (ie black) or Custome Name (Our company blue)
    shapeFontFamily: string;                // Font, ie Aria, Sans Serif
    shapeFontSize: number;                  // Size of font in px, ie 12
    shapeImageUrl: string;                  // URL of the Image
    shapeIsBold: boolean;                   // True if text is bold
    shapeIsItalic: boolean;                 // True if text is italic
    shapeLineHeight: string;                // Line Height: normal, 1.6, 80%
    shapeOpacity: number;                   // Opacity, between 0 and 1, ie of rectangle
    shapeRotation: number;                  // Nr of degrees to rotate a Shape
    shapeSize: number;                      // Size of shape, used in scale(). For now: 0-9
    shapeStroke: string;                    // Colour of line in HEX
    shapeStrokeName: string;                // Name - CSS (ie black) or Custome Name (Our company blue)
    shapeStrokeWidth: string;               // Line thickness in px
    shapeSvgHeight: number;                 // Height of SVG element
    shapeSvgWidth: number;                  // Width of SVG element
    shapeText: string;                      // Text in textbox - WITH formula, ie #pagenr
    shapeTextDisplay: string;               // Text in textbox - translated, ie 1
    shapeTextAlign: string;                 // Align text Left, Center, Right
    shapeTextColour: string;                // Text colour in HEX
    shapeTextColourName: string;            // Name - CSS (ie black) or Custome Name (Our company blue)
    shapeValue: string;                     // Value to display

    // Created, updated and refreshed
    refreshMode: string;                    // For later use: Manual, OnOpen, Repeatedly
    refreshFrequency: number;               // For later use: Nr of seconds if RefreshMode = Repeatedly
    widgetRefreshedOn: string;              // Data Refreshed on
    widgetRefreshedBy: string;              // Date Refreshed by
    widgetCreatedOn: Date;                  // Created on
    widgetCreatedBy: string;                // Created by
    widgetUpdatedOn: Date;                  // Updated on
    widgetUpdatedBy: string;                // Updated by

}

export class WidgetStoredTemplate {
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique ID
    widgetID: number;                       // FK to Widgets, where all the data is stored
    name: string;                           // Name
    description: string;                    // Description
    datasourceName: string;                 // Added at RunTime
    createdOn: Date;                        // Created on
    createdBy: string;                      // Created by
    updatedOn: Date;                        // Updated on
    updatedBy: string;                      // Updated by
}

export class WidgetGraph {
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique ID
    shortName: string;                      // Short name to display
    visualGrammar: string;                  // Vega-Lite, Vega, etc
    visualGrammarVersion: number;           // Version, ie 2.0
    visualGrammarType: string;              // Type of spec: standard (ie bar) which uses spec
       // defined in code, custom (use specification specified here)
    mark: string;                           // Vega-lite: area, bar, line, etc
    specification: any;                     // Grammar spec (template) - for custom
    imageUrl: string;                       // Url where image lives

    // @RunTime
    isSelected: boolean;                    // True if this type is selected
}

export class WidgetCheckpoint {
    _id?: string;                           // Mongo ID (read only)
    id: number;                             // Unique ID
    parentWidgetIsDeleted: boolean;         // True if W it belongs to has been deleted.
    // This is kept to perform an Undo when the W is restored.
    active: boolean;                        // Set at RunTime: true if currently shown
    dashboardID: number;                    // Linked to this D
    widgetID: number;                       // Linked to this W
    originalID: number;                     // Copied from this ID
    name: string;                           // Name of Checkpoint
    widgetSpec: any;                        // json spec of W
    creator: string;                        // UserID
    createdOn: Date;                        // DateTime of creation
}

export class Token {
	token: string;
	user: {
        id?: number;
        username: string;
        first_name: string;
        last_name: string;
        email: string;
        is_superuser: boolean;
        is_staff: boolean;
        is_active: boolean;
        groups: number[];
        user_permissions: number[];
        last_login: Date;
        date_joined: string;
        profile: string;
        url: string;
    };

}

export class CanvasHttpResponse {
    "statusCode": string;                   // Returned from server: failed, success, error
    // success = all good and all worked,
    // failed = the request was processed by the server, but the result is bad, ie a
    //          POST failed due to trying to create a duplicate key, validation failed, etc 
    // error = error on the server, ie TS or Node or Mongo error
    "message" : string;                     // Info Text message (short errorMessage for errors)
    "metaData"?: {
        "table"?: {
            "tableName": string;
            "nrRecordsReturned": number;
        },
        "fields"?: {
            "fieldName": string;
            "fieldType": string;
            "average": number;
            "max": number;
            "median": number;
            "min": number;
            "sum": number;
        }[]
    }
    "data": any;                            // Data returned, ie Json Array
    "error": {                              // If statusCode = 'error', gives Error detail, else null
        "errorCode?": string;               // Short Canvas Code for future use
        "errorMessage?": string;            // Error message from Source (ie Mongo) if possible
        "errorSource?": string;             // Source of error, ie canvasDataRouter.ts
        "errorLine?": string;               // Line number of error, where possible
        "errorObject?": string;             // Error 
        "errorHelp?": string;               // Help message on handling the error, could include url 
    };                           
    "token"?: string;                       // Token, only provided by Login
}